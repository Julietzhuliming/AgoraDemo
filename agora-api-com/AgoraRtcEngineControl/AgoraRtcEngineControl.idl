// AgoraRtcEngineControl.idl : IDL source for AgoraRtcEngineControl
//

// This file will be processed by the MIDL tool to
// produce the type library (AgoraRtcEngineControl.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	uuid(25184BF7-4EC2-4B07-BDAA-6FEF3DB78B00),
	version(1.0),
]
library AgoraRtcEngineControlLib
{
	importlib("stdole2.tlb");
	typedef
	[
        uuid(A6F8DE5D-E3E1-425D-956C-80B998BD8FA0)
	]
	enum ChannelProfile
	{
		ChannelProfile_Communication = 0,
        ChannelProfile_LiveBroadcasting = 1
    } ChannelProfile;
	typedef
	[
		uuid(52DE87DF-132C-4875-BF87-60DDF2FC38E3)
	]
	enum ClientRole
	{
		ClientRole_BroadCaster = 1,
		ClientRole_Audience = 2
	} ClientRole;
	typedef
	[
		uuid(99593833-D4CC-4A7D-BCF4-2D54F85F06A3)
	]
	enum QualityReportFormat
	{
		QualityReport_Json = 0,
		QualityReport_Html = 1
	} QualityReportFormat;
	typedef
	[
		uuid(E11120CA-13E0-4CC5-B9AE-A8664EB2384C)
	]
	enum Quality
	{
		Quality_Unknown = 0,
		Quality_Excellent = 1,
		Quality_Good = 2,
		Quality_Poor = 3,
		Quality_Bad = 4,
		Quality_VBad = 5,
		Quality_Down = 6
	} Quality;
	typedef
	[
		uuid(8BE4A242-A9E6-4878-93A8-319903EB4C36)
	]
	enum VideoProfile
	{                                   // res       fps  kbps
        VIDEO_PROFILE_120P = 0,         // 160x120   15   65
        VIDEO_PROFILE_120P_3 = 2,       // 120x120   15   50
        VIDEO_PROFILE_180P = 10,        // 320x180   15   140
        VIDEO_PROFILE_180P_3 = 12,      // 180x180   15   100
        VIDEO_PROFILE_180P_4 = 13,      // 240x180   15   120
        VIDEO_PROFILE_240P = 20,        // 320x240   15   200
        VIDEO_PROFILE_240P_3 = 22,      // 240x240   15   140
        VIDEO_PROFILE_240P_4 = 23,      // 424x240   15   220
        VIDEO_PROFILE_360P = 30,        // 640x360   15   400
        VIDEO_PROFILE_360P_3 = 32,      // 360x360   15   260
        VIDEO_PROFILE_360P_4 = 33,      // 640x360   30   600
        VIDEO_PROFILE_360P_6 = 35,      // 360x360   30   400
        VIDEO_PROFILE_360P_7 = 36,      // 480x360   15   320
        VIDEO_PROFILE_360P_8 = 37,      // 480x360   30   490
        VIDEO_PROFILE_360P_9 = 38,      // 640x360   15   800
        VIDEO_PROFILE_480P = 40,        // 640x480   15   500
        VIDEO_PROFILE_480P_3 = 42,      // 480x480   15   400
        VIDEO_PROFILE_480P_4 = 43,      // 640x480   30   750
        VIDEO_PROFILE_480P_6 = 45,      // 480x480   30   600
        VIDEO_PROFILE_480P_8 = 47,		// 848x480   15   610
        VIDEO_PROFILE_480P_9 = 48,		// 848x480   30   930
        VIDEO_PROFILE_720P = 50,        // 1280x720  15   1130
        VIDEO_PROFILE_720P_3 = 52,      // 1280x720  30   1710
        VIDEO_PROFILE_720P_5 = 54,      // 960x720   15   910
        VIDEO_PROFILE_720P_6 = 55,      // 960x720   30   1380
        VIDEO_PROFILE_1080P = 60,       // 1920x1080 15   2080
        VIDEO_PROFILE_1080P_3 = 62,     // 1920x1080 30   3150
        VIDEO_PROFILE_1080P_5 = 64,     // 1920x1080 60   4780
        VIDEO_PROFILE_1440P = 66,       // 2560x1440 30   4850
        VIDEO_PROFILE_1440P_2 = 67,     // 2560x1440 60   7350
        VIDEO_PROFILE_4K = 70,          // 3840x2160 30   8910
        VIDEO_PROFILE_4K_3 = 72,        // 3840x2160 60   13500
        VIDEO_PROFILE_DEFAULT = VIDEO_PROFILE_360P,
    } VideoProfile;
	typedef
	[
		uuid(D178C7A6-E955-49B4-BB91-9F8924D9402E)
	]
	enum RenderMode
	{
		RenderMode_Hidden = 1,
		RenderMode_Fit = 2,
		RenderMode_Adaptive = 3
	} RenderMode;
	typedef
		[
			uuid(8FA790A8-C84B-4BE8-8B62-2F80FB743A23)
		]
	enum UserOfflineReason
	{
		UserOffline_Quit = 0,
		UserOffline_Dropped = 1
	} UserOfflineReason;

    typedef
        [
            uuid(6A6C603E-3766-48D7-B054-D3682E7198B3)
        ]
    enum MediaDeviceState
    {
        MEDIA_DEVICE_STATE_ACTIVE = 1,
        MEDIA_DEVICE_STATE_DISABLED = 2,
        MEDIA_DEVICE_STATE_NOT_PRESENT = 4,
        MEDIA_DEVICE_STATE_UNPLUGGED = 8
    }MediaDeviceState;

    typedef
        [
            uuid(CACD3155-54A3-4BEF-A5D2-1A9F5DD815ED)
        ]
    enum MediaDevice
    {
        UNKNOWN_AUDIO_DEVICE = -1,
        AUDIO_PLAYOUT_DEVICE = 0,
        AUDIO_RECORDING_DEVICE = 1,
        VIDEO_RENDER_DEVICE = 2,
        VIDEO_CAPTURE_DEVICE = 3
    }MediaDevice;

	[
		object,
		uuid(7F7C6262-B8C8-4F5D-A569-02A0F5998442),
		dual,
		nonextensible,
		pointer_default(unique)
	]
	interface IAgoraRtcEngineControl : IDispatch{
		[id(1)] HRESULT initialize([in] BSTR appId, [out, retval] LONG* result);
		[id(2)] HRESULT joinChannel([in] BSTR channelKey, [in] BSTR channelName, [in] BSTR info, [in] ULONG uid, [out, retval] LONG* result);
		[id(3)] HRESULT leaveChannel([out, retval] LONG* result);
		[id(4)] HRESULT setParameters([in] BSTR parameters, [out, retval] LONG* result);
		[id(5)] HRESULT muteLocalAudioStream([in] VARIANT_BOOL muted, [out, retval] LONG* result);
		[id(6)] HRESULT muteAllRemoteAudioStreams([in] VARIANT_BOOL muted, [out, retval] LONG* result);
		[id(7)] HRESULT muteRemoteAudioStream([in] ULONG uid, [in] VARIANT_BOOL muted, [out, retval] LONG* result);
        [id(8)] HRESULT setClientRole([in] enum ClientRole role, [in] BSTR permissionKey, [out, retval] LONG* result);
		[id(9)] HRESULT renewChannelKey([in] BSTR channelKey, [out, retval] LONG* result);
		[id(10)] HRESULT startEchoTest([out, retval] LONG* result);
		[id(11)] HRESULT stopEchoTest([out, retval] LONG* result);
		[id(12)] HRESULT enableLastmileTest([out, retval] LONG* result);
		[id(13)] HRESULT disableLastmileTest([out, retval] LONG* result);
		[id(14)] HRESULT getCallId([out, retval] BSTR* callId);
		[id(15)] HRESULT rate([in] BSTR callId, [in] LONG rating, [in] BSTR description, [out, retval] LONG* result);
		[id(16)] HRESULT complain([in] BSTR callId, [in] BSTR description, [out, retval] LONG* result);
		[id(18)] HRESULT enableVideo([out, retval] LONG* result);
		[id(19)] HRESULT disableVideo([out, retval] LONG* result);
		[id(20)] HRESULT startPreview([out, retval] LONG* result);
		[id(21)] HRESULT stopPreview([out, retval] LONG* result);
        [id(22)] HRESULT setVideoProfile([in] enum VideoProfile profile, [in] VARIANT_BOOL swapWidthAndHeight, [out, retval] LONG* result);
		[id(23)] HRESULT setupLocalVideo([in] LONG_PTR** view, [in] enum RenderMode renderMode, [out, retval] LONG* result);
		[id(24)] HRESULT setupRemoteVideo([in] ULONG uid, [in] LONG_PTR** view, [in] enum RenderMode renderMode, [out, retval] LONG* result);
		[id(25)] HRESULT muteLocalVideoStream([in] VARIANT_BOOL muted, [out, retval] LONG* result);
		[id(26)] HRESULT muteAllRemoteVideoStreams([in] VARIANT_BOOL muted, [out, retval] LONG* result);
		[id(27)] HRESULT muteRemoteVideoStream([in] ULONG uid, [in] VARIANT_BOOL muted, [out, retval] LONG* result);
		[id(29)] HRESULT release();
		[id(30)] HRESULT startAudioRecording([in] BSTR filePath, [out, retval] LONG* result);
		[id(31)] HRESULT stopAudioRecording([out, retval] LONG* result);
		[id(32)] HRESULT setLogFile([in] BSTR filePath, [out, retval] LONG* result);
		[id(33)] HRESULT setLogFilter([in] ULONG filter, [out, retval] LONG* result);
		[id(34)] HRESULT setLocalRenderMode([in] RenderMode renderMode, [out, retval] LONG* result);
		[id(35)] HRESULT setRemoteRenderMode([in] ULONG uid, [in] RenderMode renderMode, [out, retval] LONG* result);
		[id(36)] HRESULT setPlaybackDeviceVolume([in] LONG volume, [out, retval] LONG* result);
		[id(37)] HRESULT startRecordingService([in] BSTR recordingKey, [out, retval] LONG* result);
		[id(38)] HRESULT stopRecordingService([in] BSTR recordingKey, [out, retval] LONG* result);
		[id(39)] HRESULT refreshRecordingServiceStatus([out, retval] LONG* result);
		[id(40)] HRESULT startScreenCapture([in] LONG_PTR** window, [out, retval] LONG* result);
		[id(41)] HRESULT setScreenCaptureWindow([in] LONG_PTR** window, [out, retval] LONG* result);
		[id(42)] HRESULT stopScreenCapture([out, retval] LONG* result);
		[id(43)] HRESULT startAudioMixing([in] BSTR filePath, [in] VARIANT_BOOL loopback, [in] VARIANT_BOOL replace, [in] LONG cycle, [out, retval] LONG* result);
		[id(44)] HRESULT stopAudioMixing([out, retval] LONG* result);
		[id(45)] HRESULT setEncryptionSecret([in] BSTR secret, [out, retval] LONG* result);
        [id(46)] HRESULT setEncryptionMode([in] BSTR encryptionMode, [out, retval] LONG* result);
        [id(47)] HRESULT setChannelProfile([in] enum ChannelProfile profile, [out, retval] LONG* result);
        [id(48)] HRESULT enumeratePlaybackDevices([out, retval] BSTR* result);
        [id(49)] HRESULT enumerateRecordingDevices([out, retval] BSTR* result);
        [id(50)] HRESULT enumerateVideoCaptureDevices([out, retval] BSTR* result);
        [id(51)] HRESULT setPlaybackDevice([in] BSTR deviceId, [out, retval] LONG* result);
        [id(52)] HRESULT setRecordingDevice([in] BSTR deviceId, [out, retval] LONG* result);
        [id(53)] HRESULT setVideoCaptureDevice([in] BSTR deviceId, [out, retval] LONG* result);
        [propget, id(28)] HRESULT fireEventInInitializationThread([out, retval] VARIANT_BOOL* pVal);
		[propput, id(28)] HRESULT fireEventInInitializationThread([in] VARIANT_BOOL newVal);
	};
	[
		uuid(C9A10FD6-1660-4DEF-856C-55DF11772DAE)
	]
	dispinterface _IAgoraRtcEngineControlEvents
	{
		properties:
		methods:
			[id(1)] void onWarning([in] LONG warnCode);
			[id(2)] void onError([in] LONG errorCode);
			[id(3)] void onJoinChannelSuccess([in] BSTR channel, [in] ULONG uid, [in] LONG elapsed);
			[id(4)] void onRejoinChannelSuccess([in] BSTR channel, [in] ULONG uid, [in] LONG elapsed);
			[id(5)] void onLeaveChannel([in] ULONG duration, [in] ULONG txBytes, [in] ULONG rxBytes);
			[id(6)] void onConnectionLost();
			[id(7)] void onAudioQuality([in] ULONG uid, [in] enum Quality quality, [in] USHORT delay, [in] USHORT lost);
			[id(8)] void onRtcStats([in] ULONG duration, [in] ULONG txBytes, [in] ULONG rxBytes);
			[id(9)] void onNetworkQuality([in] ULONG uid, [in] enum Quality txQuality, [in] enum Quality rxQuality);
			[id(10)] void onApiCallExecuted([in] BSTR api, [in] LONG error);
			[id(11)] void onUserJoined([in] ULONG uid, [in] LONG elapsed);
			[id(12)] void onUserOffline([in] ULONG uid, [in] enum UserOfflineReason reason);
			[id(13)] void onUserMuteAudio([in] ULONG uid, [in] VARIANT_BOOL muted);
			[id(14)] void onUserMuteVideo([in] ULONG uid, [in] VARIANT_BOOL muted);
			[id(15)] void onCameraReady();
			[id(16)] void onVideoStopped();
			[id(17)] void onLocalVideoStats([in] LONG sentBitrate, [in] LONG sentFrameRate);
			[id(18)] void onRemoteVideoStats([in] ULONG uid, [in] LONG delay, [in] LONG receivedBitrate, [in] LONG receiveFrameRate);
			[id(19)] void onFirstLocalVideoFrame([in] LONG width, [in] LONG height, [in] LONG elapsed);
			[id(20)] void onFirstRemoteVideoDecoded([in] ULONG uid, [in] LONG width, [in] LONG height, [in] LONG elapsed);
			[id(21)] void onFirstRemoteVideoFrame([in] ULONG uid, [in] LONG width, [in] LONG height, [in] LONG elapsed);
			[id(22)] void onConnectionInterrupted();
			[id(23)] void onUserEnableVideo([in] ULONG uid, [in] VARIANT_BOOL enabled);
			[id(24)] void onRefreshRecordingServiceStatus([in] LONG status);
            [id(25)] void onLastmileQuality([in] enum Quality quality);
            [id(26)] void onAudioDeviceStateChanged([in] BSTR deviceId, [in] MediaDevice deviceType, [in] MediaDeviceState deviceState);
            [id(27)] void onVideoDeviceStateChanged([in] BSTR deviceId, [in] MediaDevice deviceType, [in] MediaDeviceState deviceState);
            [id(28)] void onAudioMixingFinished();
    };
	[
		uuid(DA06DE88-2602-478F-A731-5BEA37508D69)		
	]
	coclass AgoraRtcEngineControl
	{
		[default] interface IAgoraRtcEngineControl;
		[default, source] dispinterface _IAgoraRtcEngineControlEvents;
	};
};

